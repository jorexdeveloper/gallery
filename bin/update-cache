#!/bin/bash

# Update the cache files

#
# Functions
#

log() {
	if [[ -t 2 ]]; then
		local C0=$'\033[0m'
		local C1=$'\033[31m'
		local C2=$'\033[32m'
		local C3=$'\033[33m'
		local C4=$'\033[34m'
		local C5=$'\033[35m'
		local CB=$'\033[1m'
	fi

	local n="${C0}"
	local c="${C4}"
	local p='*'
	local e=

	while getopts ":ceswd" opt; do
		case "${opt}" in
			c)
				p='✖'
				c="${C1}"
				e=1
				;;
			e)
				p='✖'
				c="${C1}"
				;;
			s)
				p='✔'
				c="${C2}"
				;;
			w)
				p='!'
				c="${C3}"
				;;
			d)
				p='+'
				c="${C5}"
				;;
			*) ;;
		esac
	done
	shift $((OPTIND - 1))
	unset OPTIND

	printf "${n}[${CB}${c}${p}${n}] ${NAME}: %s\n" "${*}" >&2

	if [[ ${e} ]]; then
		exit 1
	fi
}

usage() {
	echo "${USAGE}"
}

#
# Entry
#

NAME="$(basename "${0}")"
BASE="$(realpath "$(dirname "${0}")"/..)"

FORCE=
IMAGES=1
VIDEOS=1
PID=()

USAGE="\
Usage: ${NAME} [OPTION] [PATH]...

Update the cache files.

Options:
  -i        Generate image thumbnails only.
  -v        Generate video thumbnails only.
  -f        Force new cache generation.
  -p <PID>  Reload a running server.
  -h        Show help message and exit."

while getopts ":ivfp:h" opt; do
	case "${opt}" in
		i)
			VIDEOS=
			;;
		v)
			IMAGES=
			;;
		f)
			FORCE=1
			;;
		p)
			PID+=("${OPTARG}")
			;;
		h)
			usage
			exit
			;;
		:)
			echo "${NAME}: option '-${OPTARG}' requires an argument."
			usage
			exit 1
			;;
		*)
			echo "${NAME}: unknown option '-${OPTARG}'."
			usage
			exit 1
			;;
	esac
done
shift $((OPTIND - 1))
unset OPTIND

log "Initializing virtual environment."

if [[ -d ${BASE}/.venv && -f ${BASE}/.venv/bin/activate ]]; then
	. "${BASE}"/.venv/bin/activate
else
	log -w "No virtual environment found!"
fi

for cmd in dotenv magick ffmpeg; do
	if ! command -v "${cmd}" &>/dev/null; then
		log -c "${cmd} is not installed!"
	fi
done

if ! cd "${BASE}" &>/dev/null; then
	log -c "Failed to change to project directory!"
fi

log "Initializing environment variables."

if [[ -f .env ]]; then
	eval "$(dotenv list --format shell | grep -e ^MEDIA_DIR -e ^IMAGE_EXTS -e ^VIDEO_EXTS -e ^CACHE_DIR -e ^THUMBNAILS_FILE -e ^THUMBNAILS_EXT)"

	for var in MEDIA_DIR IMAGE_EXTS VIDEO_EXTS CACHE_DIR THUMBNAILS_FILE THUMBNAILS_EXT; do
		if [[ ! "${!var}" ]]; then
			log -c "Variable ${var} is not set!"
		fi
	done
else
	log -c ".env file not found!"
fi

FIND_DIRS=()
MEDIA_DIR=$(realpath -sm "${MEDIA_DIR}")

if [[ ${#} -gt 0 ]]; then
	for dir in "${@}"; do
		target=$(realpath -sm "${dir}")

		if [[ ${target:0:${#MEDIA_DIR}} == "${MEDIA_DIR}" ]]; then
			FIND_DIRS+=("${target}")
		else
			log -c "${dir} is not within the media directory."
		fi
	done
else
	FIND_DIRS+=("${MEDIA_DIR}"/)
fi

log "Preparing cache directory."

if ! mkdir -p "${CACHE_DIR}/${THUMBNAILS_FILE}"; then
	log -c "Failed to prepare cache directory."
fi

if [[ ${IMAGES} ]]; then
	log "Generating image thumbnails."

	eval "find \"\${FIND_DIRS[@]}\" \( -iname \*${IMAGE_EXTS//,/ -o -iname *} -type f,l \) -print0" | while IFS= read -r -d '' img; do
		file="${img#"${MEDIA_DIR}"/}"
		thumb="${CACHE_DIR}/${THUMBNAILS_FILE}/${file%.*}${THUMBNAILS_EXT}"

		if [[ ${FORCE} ]]; then
			rm -rf "${thumb}"
		elif [[ -f "${thumb}" ]]; then
			continue
		fi

		if mkdir -p "$(dirname "${thumb}")" && magick "${img}"[0] -resize 320x -quality 70 "${thumb}"; then
			log -s "${file}"
		else
			log -e "${file}"
		fi
	done
fi

if [[ ${VIDEOS} ]]; then
	log "Generating video thumbnails."

	eval "find \"\${FIND_DIRS[@]}\" \( -iname \*${VIDEO_EXTS//,/ -o -iname *} -type f,l \) -print0" | while IFS= read -r -d '' vid; do
		file="${vid#"${MEDIA_DIR}"/}"
		thumb="${CACHE_DIR}/${THUMBNAILS_FILE}/${file%.*}${THUMBNAILS_EXT}"

		if [[ ${FORCE} ]]; then
			rm -rf "${thumb}"
		elif [[ -f "${thumb}" ]]; then
			continue
		fi

		duration=$(ffprobe -v error -show_entries format=duration -of default=noprint_wrappers=1:nokey=1 "${vid}" | cut -d. -f1)

		if [[ ! ${duration} || ${duration} -lt 1 ]]; then
			log -e "${file}"

			continue
		fi

		seek=$(echo "scale=0; ${duration} * 10 / 100" | bc)

		if [[ "${seek}" -le 0 ]]; then
			seek=1
		fi

		if mkdir -p "$(dirname "${thumb}")" && { ffmpeg -n -nostdin -ss "${seek}" -i "${vid}" -vf "select=eq(pict_type\,I),scale=320:-1" -frames:v 1 -q:v 5 "${thumb}" || ffmpeg -n -nostdin -ss "${seek}" -i "${vid}" -vf "scale=320:-1" -frames:v 1 -q:v 5 "${thumb}"; } &>/dev/null; then
			log -s "${file}"
		else
			log -e "${file}"
		fi
	done
fi

log "Updating the manifest file."

if bash bin/update-manifest &>/dev/null; then
	log -s "Manifest file updated succesfully!"
else
	log -c "Failed to update the manifest file."
fi

if [[ ${#PID} -gt 0 ]]; then
	log "Reloading running servers."

	bash bin/reload-server "${PID[@]}"
fi
