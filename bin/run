#!/bin/sh

# Run the production server

#
# Functions
#

log() {
	if [ -t 2 ]; then
		C0='\033[0m'
		C1='\033[31m'
		C2='\033[32m'
		C3='\033[33m'
		C4='\033[34m'
		C5='\033[35m'
		CB='\033[1m'
	fi
	n="${C0}"
	c="${C4}"
	p='*'
	while getopts ":eswd" opt; do
		case "${opt}" in
			e)
				p='✖'
				c="${C1}"
				;;
			s)
				p='✔'
				c="${C2}"
				;;
			w)
				p='!'
				c="${C3}"
				;;
			d)
				p='+'
				c="${C5}"
				;;
			*) ;;
		esac
	done
	shift $((OPTIND - 1))

	printf "${n}[${CB}${c}${p}${n}] ${NAME}: %s\n" "${*}" >&2
}

usage() {
	echo "${USAGE}"
}

#
# Entry
#

NAME="$(basename "${0}")"
BASE="$(realpath "$(dirname "${0}")"/..)"

ADDR=0.0.0.0
PORT=1080

SOCKET=

USAGE="\
Usage: ${NAME} [OPTION]

Run the production server.

Options:
  -H <ADDR>  Bind to ADDR (default=${ADDR}).
  -P <PORT>  Bind to PORT (default=${PORT}).
  -S <PATH>  Bind to a unix socket instead.
  -h         Show help message and exit.

Extra arguments are sent to the server."

while getopts ":H:P:S:h" opt; do
	case "${opt}" in
		H) ADDR="${OPTARG}" ;;
		P) PORT="${OPTARG}" ;;
		S) SOCKET="$(realpath -m "${OPTARG}")" ;;
		h)
			usage
			exit
			;;
		:)
			echo "${NAME}: option '-${OPTARG}' requires an argument."
			usage
			exit 1
			;;
		*)
			OPTIND=$((OPTIND - 1))
			break
			;;
	esac
done
shift $((OPTIND - 1))

log "Initializing virtual environment."

if [ -d "${BASE}"/.venv ] && [ -f "${BASE}"/.venv/bin/activate ]; then
	. "${BASE}"/.venv/bin/activate
else
	log -w "No virtual environment found!"
fi

if ! command -v python3 >/dev/null 2>&1; then
	log -e "Python3 not installed!"
	exit 1
fi

if ! command -v gunicorn >/dev/null 2>&1; then
	log -e "Server (gunicorn) not found!"
	exit 1
fi

cd "${BASE}" >/dev/null 2>&1 || {
	log -e "Failed to switch to project directory!"
	exit 1
}

log "Starting the production server."

if [ -n "${SOCKET}" ]; then
	BIND="unix:${SOCKET}"
	log "Listening at: ${SOCKET}"
else
	BIND="${ADDR}:${PORT}"
	log "Listening at: http://${ADDR}:${PORT}"
fi

exec gunicorn \
	-w "$(nproc || printf 1)" \
	-b "${BIND}" \
	'app:create_app()' "${@}" >/dev/null 2>&1
